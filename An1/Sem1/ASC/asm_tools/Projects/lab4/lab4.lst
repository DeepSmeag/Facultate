     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 AAAA                        a dw 1010101010101010b
    15 00000002 5555                        b dw 0101010101010101b
    16 00000004 00000000                    c dd 0
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; ...
    21                                          ;3. Se dau cuvintele A si B. Sa se obtina dublucuvantul C:
    22                                          ; bitii 0-2 ai lui C coincid cu bitii 12-14 ai lui A
    23                                          ; bitii 3-8 ai lui C coincid cu bitii 0-5 ai lui B
    24                                          ; bitii 9-15 ai lui C coincid cu bitii 3-9 ai lui A
    25                                          ; bitii 16-31 ai lui C coincid cu bitii lui A
    26                                          
    27 00000000 66A1[00000000]                  mov AX, [a] ; AX = a
    28 00000006 C1E010                          shl EAX, 16; EAX are bitii 16-31 drept bitii lui A
    29 00000009 6683E000                        and AX, 0000000000000000b; AX = 0 acum
    30                                          ; Acum lucram doar pe AX
    31 0000000D 668B1D[00000000]                mov BX, [a] ; BX =a
    32 00000014 6681E3F803                      and BX, 0000001111111000b ; izolam bitii 3-9 ai lui A
    33 00000019 66C1E306                        shl BX, 6 ; Aducem bitii pe pozitiile 9-15
    34 0000001D 6609D8                          or AX, BX ; AX va avea bitii lui A pe pozitiile 9-15
    35                                          
    36 00000020 668B1D[02000000]                mov BX, [b] ; BX = b
    37 00000027 6683E33F                        and BX, 0000000000111111b ; am izolat bitii 0-5 din B
    38 0000002B 66C1E303                        shl BX, 3 ; am mutat bitii in pozitiile corecte
    39 0000002F 6609D8                          or AX, BX ; Acum AX are pe pozitiile 3-8 bitii 0-5 ai lui b
    40                                          
    41 00000032 668B1D[00000000]                mov BX, [a]
    42 00000039 6681E30070                      and BX, 0111000000000000b ; izolam bitii 12-14 ai lui A
    43 0000003E 66C1EB0C                        shr BX, 12 ; mutam pe pozitiile corecte
    44 00000042 6609D8                          or AX, BX ; AX are bitii ceruti pe pozitiile cerute
    45                                          ;EAX = 1010 1010 1010 1010 1010 1010 1010 1010b 
    46 00000045 A3[04000000]                    mov [c], EAX ; c primeste EAX cu cerintele impuse
    47                                          
    48                                          ; exit(0)
    49 0000004A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 0000004C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
