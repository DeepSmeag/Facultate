     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01020304                    s1 db 1, 2, 3, 4
    15                                      l1 equ $-s1
    16 00000004 050607                      s2 db 5, 6, 7
    17                                      l2 equ $-s2
    18 00000007 00<rept>                    d times l1+l2 db 0
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          ;3.Se dau doua siruri de octeti S1 si S2. Sa se construiasca sirul D prin concatenarea
    24                                          ;elementelor din sirul S1 luate de la stanga spre dreapta si a elementelor din sirul S2 luate de la dreapta spre stanga. 
    25                                          
    26 00000000 B904000000                      mov ECX, l1 ;punem lungimea primului sir in ECX pentru bucla loop
    27 00000005 BE00000000                      mov ESI, 0
    28 0000000A E30F                            jecxz sfarsit1 ;ne asiguram ca nu intram cu ECX=0 in loop
    29                                          Repeta1:
    30 0000000C 8A86[00000000]                      mov AL, [s1+ESI] ;Puneam in AL elementele sirului s1 in ordine
    31 00000012 8886[07000000]                      mov [d+ESI], AL ;Punem in sirul D elementele sirului s1 in ordine
    32 00000018 46                                  inc ESI
    33 00000019 E2F1                            loop Repeta1
    34                                          sfarsit1:
    35                                          
    36 0000001B B903000000                      mov ECX, l2   ;puneam lungimea celui de al doilea sir in ECX pentru bucla loop
    37 00000020 BE00000000                      mov ESI, 0
    38 00000025 E30F                            jecxz sfarsit2 ;ne asiguram ca nu intram cu ECX=0 in loop
    39                                          Repeta2:
    40 00000027 8A81[03000000]                      mov AL, [s2+ECX-1] ;Puneam in AL elementele sirului s2 in ordine inversa 
    41 0000002D 8886[0B000000]                      mov [d+l1+ESI], AL ;Punem in sirul D elementele sirului s2 in ordine inversa
    42 00000033 46                                  inc ESI
    43 00000034 E2F1                            loop Repeta2
    44                                          sfarsit2:
    45 00000036 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 00000038 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
